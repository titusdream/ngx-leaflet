{"version":3,"file":"ngx-leaflet.js","sources":["../leaflet/core/leaflet.directive.js","../leaflet/core/leaflet.directive.wrapper.js","../leaflet/layers/leaflet-layer.directive.js","../leaflet/layers/leaflet-layers.directive.js","../leaflet/layers/control/leaflet-control-layers-changes.model.js","../leaflet/layers/control/leaflet-control-layers.wrapper.js","../leaflet/layers/control/leaflet-control-layers-config.model.js","../leaflet/layers/control/leaflet-control-layers.directive.js","../leaflet/core/leaflet.util.js","../leaflet/layers/base/leaflet-baselayers.directive.js","../leaflet/leaflet.module.js","../leaflet/layers/leaflet-tile-layer-definition.model.js"],"sourcesContent":["import { Directive, ElementRef, EventEmitter, HostListener, Input, NgZone, Output } from '@angular/core';\r\nimport { latLng, LatLng, LatLngBounds, map } from 'leaflet';\r\nvar LeafletDirective = /** @class */ (function () {\r\n    function LeafletDirective(element, zone) {\r\n        // Nothing here\r\n        this.element = element;\r\n        this.zone = zone;\r\n        this.DEFAULT_ZOOM = 1;\r\n        this.DEFAULT_CENTER = latLng(38.907192, -77.036871);\r\n        this.DEFAULT_FPZ_OPTIONS = {};\r\n        this.fitBoundsOptions = this.DEFAULT_FPZ_OPTIONS;\r\n        this.panOptions = this.DEFAULT_FPZ_OPTIONS;\r\n        this.zoomOptions = this.DEFAULT_FPZ_OPTIONS;\r\n        this.zoomPanOptions = this.DEFAULT_FPZ_OPTIONS;\r\n        // Default configuration\r\n        this.options = {};\r\n        // Configure callback function for the map\r\n        this.mapReady = new EventEmitter();\r\n        this.moveEnd = new EventEmitter();\r\n    }\r\n    LeafletDirective.prototype.ngOnInit = function () {\r\n        var _this = this;\r\n        // Create the map outside of angular so the various map events don't trigger change detection\r\n        this.zone.runOutsideAngular(function () {\r\n            // Create the map with some reasonable defaults\r\n            // Create the map with some reasonable defaults\r\n            _this.map = map(_this.element.nativeElement, _this.options);\r\n        });\r\n        // Only setView if there is a center/zoom\r\n        if (null != this.center && null != this.zoom) {\r\n            this.setView(this.center, this.zoom);\r\n        }\r\n        // Set up all the initial settings\r\n        if (null != this.fitBounds) {\r\n            this.setFitBounds(this.fitBounds);\r\n        }\r\n        this.doResize();\r\n        // Fire map ready event\r\n        this.mapReady.emit(this.map);\r\n    };\r\n    LeafletDirective.prototype.ngOnChanges = function (changes) {\r\n        var _this = this;\r\n        /*\r\n             * The following code is to address an issue with our (basic) implementation of\r\n             * zooming and panning. From our testing, it seems that a pan operation followed\r\n             * by a zoom operation in the same thread will interfere with eachother. The zoom\r\n             * operation interrupts/cancels the pan, resulting in a final center point that is\r\n             * inaccurate. The solution seems to be to either separate them with a timeout or\r\n              * to collapse them into a setView call.\r\n             */\r\n        // Zooming and Panning\r\n        if (changes['zoom'] && changes['center'] && null != this.zoom && null != this.center) {\r\n            var targetPoint = this.map.project(changes['center'].currentValue, changes['zoom'].currentValue).subtract([300, 0]);\r\n            var targetLatLng = this.map.unproject(targetPoint, changes['zoom'].currentValue);\r\n            this.setFlyTo(targetLatLng, changes['zoom'].currentValue);\r\n            this.map.once('moveend', function () { _this.moveEnd.emit(); });\r\n        }\r\n        else if (changes['zoom']) {\r\n            this.setZoom(changes['zoom'].currentValue);\r\n        }\r\n        else if (changes['center']) {\r\n            this.setCenter(changes['center'].currentValue);\r\n        }\r\n        // Fit bounds\r\n        if (changes['fitBounds']) {\r\n            this.setFitBounds(changes['fitBounds'].currentValue);\r\n        }\r\n    };\r\n    LeafletDirective.prototype.getMap = function () {\r\n        return this.map;\r\n    };\r\n    LeafletDirective.prototype.onResize = function () {\r\n        this.delayResize();\r\n    };\r\n    /**\r\n     * Resize the map to fit it's parent container\r\n     */\r\n    /**\r\n       * Resize the map to fit it's parent container\r\n       */\r\n    LeafletDirective.prototype.doResize = /**\r\n       * Resize the map to fit it's parent container\r\n       */\r\n    function () {\r\n        var _this = this;\r\n        // Run this outside of angular so the map events stay outside of angular\r\n        this.zone.runOutsideAngular(function () {\r\n            // Invalidate the map size to trigger it to update itself\r\n            // Invalidate the map size to trigger it to update itself\r\n            _this.map.invalidateSize({});\r\n        });\r\n    };\r\n    /**\r\n     * Manage a delayed resize of the component\r\n     */\r\n    /**\r\n       * Manage a delayed resize of the component\r\n       */\r\n    LeafletDirective.prototype.delayResize = /**\r\n       * Manage a delayed resize of the component\r\n       */\r\n    function () {\r\n        if (null != this.resizeTimer) {\r\n            clearTimeout(this.resizeTimer);\r\n        }\r\n        this.resizeTimer = setTimeout(this.doResize.bind(this), 200);\r\n    };\r\n    /**\r\n     * Set the view (center/zoom) all at once\r\n     * @param center The new center\r\n     * @param zoom The new zoom level\r\n     */\r\n    /**\r\n       * Set the view (center/zoom) all at once\r\n       * @param center The new center\r\n       * @param zoom The new zoom level\r\n       */\r\n    LeafletDirective.prototype.setView = /**\r\n       * Set the view (center/zoom) all at once\r\n       * @param center The new center\r\n       * @param zoom The new zoom level\r\n       */\r\n    function (center, zoom) {\r\n        if (this.map && null != center && null != zoom) {\r\n            this.map.setView(center, zoom, this.zoomPanOptions);\r\n        }\r\n    };\r\n    LeafletDirective.prototype.setFlyTo = function (center, zoom) {\r\n        if (this.map && null != center && null != zoom) {\r\n            this.map.flyTo(center, zoom, this.zoomPanOptions);\r\n        }\r\n    };\r\n    /**\r\n     * Set the map zoom level\r\n     * @param zoom the new zoom level for the map\r\n     */\r\n    /**\r\n       * Set the map zoom level\r\n       * @param zoom the new zoom level for the map\r\n       */\r\n    LeafletDirective.prototype.setZoom = /**\r\n       * Set the map zoom level\r\n       * @param zoom the new zoom level for the map\r\n       */\r\n    function (zoom) {\r\n        if (this.map && null != zoom) {\r\n            this.map.setZoom(zoom, this.zoomOptions);\r\n        }\r\n    };\r\n    /**\r\n     * Set the center of the map\r\n     * @param center the center point\r\n     */\r\n    /**\r\n       * Set the center of the map\r\n       * @param center the center point\r\n       */\r\n    LeafletDirective.prototype.setCenter = /**\r\n       * Set the center of the map\r\n       * @param center the center point\r\n       */\r\n    function (center) {\r\n        if (this.map && null != center) {\r\n            this.map.panTo(center, this.panOptions);\r\n        }\r\n    };\r\n    /**\r\n     * Fit the map to the bounds\r\n     * @param center the center point\r\n     */\r\n    /**\r\n       * Fit the map to the bounds\r\n       * @param center the center point\r\n       */\r\n    LeafletDirective.prototype.setFitBounds = /**\r\n       * Fit the map to the bounds\r\n       * @param center the center point\r\n       */\r\n    function (latLngBounds) {\r\n        if (this.map && null != latLngBounds) {\r\n            this.map.fitBounds(latLngBounds, this.fitBoundsOptions);\r\n        }\r\n    };\r\n    LeafletDirective.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: '[leaflet]'\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    LeafletDirective.ctorParameters = function () { return [\r\n        { type: ElementRef, },\r\n        { type: NgZone, },\r\n    ]; };\r\n    LeafletDirective.propDecorators = {\r\n        \"fitBoundsOptions\": [{ type: Input, args: ['leafletFitBoundsOptions',] },],\r\n        \"panOptions\": [{ type: Input, args: ['leafletPanOptions',] },],\r\n        \"zoomOptions\": [{ type: Input, args: ['leafletZoomOptions',] },],\r\n        \"zoomPanOptions\": [{ type: Input, args: ['leafletZoomPanOptions',] },],\r\n        \"options\": [{ type: Input, args: ['leafletOptions',] },],\r\n        \"mapReady\": [{ type: Output, args: ['leafletMapReady',] },],\r\n        \"zoom\": [{ type: Input, args: ['leafletZoom',] },],\r\n        \"center\": [{ type: Input, args: ['leafletCenter',] },],\r\n        \"fitBounds\": [{ type: Input, args: ['leafletFitBounds',] },],\r\n        \"moveEnd\": [{ type: Output, args: ['leafletMoveEnd',] },],\r\n        \"onResize\": [{ type: HostListener, args: ['window:resize', [],] },],\r\n    };\r\n    return LeafletDirective;\r\n}());\r\nexport { LeafletDirective };\r\n//# sourceMappingURL=leaflet.directive.js.map","var LeafletDirectiveWrapper = /** @class */ (function () {\r\n    function LeafletDirectiveWrapper(leafletDirective) {\r\n        this.leafletDirective = leafletDirective;\r\n    }\r\n    LeafletDirectiveWrapper.prototype.init = function () {\r\n        // Nothing for now\r\n    };\r\n    LeafletDirectiveWrapper.prototype.getMap = function () {\r\n        return this.leafletDirective.getMap();\r\n    };\r\n    return LeafletDirectiveWrapper;\r\n}());\r\nexport { LeafletDirectiveWrapper };\r\n//# sourceMappingURL=leaflet.directive.wrapper.js.map","import { Directive, Input, NgZone } from '@angular/core';\r\nimport { Layer } from 'leaflet';\r\nimport { LeafletDirective } from '../core/leaflet.directive';\r\nimport { LeafletDirectiveWrapper } from '../core/leaflet.directive.wrapper';\r\n/**\r\n * Layer directive\r\n *\r\n * This directive is used to directly control a single map layer. The purpose of this directive is to\r\n * be used as part of a child structural directive of the map element.\r\n *\r\n */\r\nvar LeafletLayerDirective = /** @class */ (function () {\r\n    function LeafletLayerDirective(leafletDirective, zone) {\r\n        this.zone = zone;\r\n        this.leafletDirective = new LeafletDirectiveWrapper(leafletDirective);\r\n    }\r\n    LeafletLayerDirective.prototype.ngOnInit = function () {\r\n        // Init the map\r\n        this.leafletDirective.init();\r\n    };\r\n    LeafletLayerDirective.prototype.ngOnDestroy = function () {\r\n        this.layer.remove();\r\n    };\r\n    LeafletLayerDirective.prototype.ngOnChanges = function (changes) {\r\n        var _this = this;\r\n        if (changes['layer']) {\r\n            // Update the layer\r\n            var p_1 = changes['layer'].previousValue;\r\n            var n_1 = changes['layer'].currentValue;\r\n            this.zone.runOutsideAngular(function () {\r\n                if (null != p_1) {\r\n                    p_1.remove();\r\n                }\r\n                if (null != n_1) {\r\n                    _this.leafletDirective.getMap().addLayer(n_1);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    LeafletLayerDirective.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: '[leafletLayer]'\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    LeafletLayerDirective.ctorParameters = function () { return [\r\n        { type: LeafletDirective, },\r\n        { type: NgZone, },\r\n    ]; };\r\n    LeafletLayerDirective.propDecorators = {\r\n        \"layer\": [{ type: Input, args: ['leafletLayer',] },],\r\n    };\r\n    return LeafletLayerDirective;\r\n}());\r\nexport { LeafletLayerDirective };\r\n//# sourceMappingURL=leaflet-layer.directive.js.map","import { Directive, Input, IterableDiffers, NgZone } from '@angular/core';\r\nimport { LeafletDirective } from '../core/leaflet.directive';\r\nimport { LeafletDirectiveWrapper } from '../core/leaflet.directive.wrapper';\r\n/**\r\n * Layers directive\r\n *\r\n * This directive is used to directly control map layers. As changes are made to the input array of\r\n * layers, the map is synched to the array. As layers are added or removed from the input array, they\r\n * are also added or removed from the map. The input array is treated as immutable. To detect changes,\r\n * you must change the array instance.\r\n *\r\n * Important Note: The input layers array is assumed to be immutable. This means you need to use an\r\n * immutable array implementation or create a new copy of your array when you make changes, otherwise\r\n * this directive won't detect the change. This is by design. It's for performance reasons. Change\r\n * detection of mutable arrays requires diffing the state of the array on every DoCheck cycle, which\r\n * is extremely expensive from a time complexity perspective.\r\n *\r\n */\r\nvar LeafletLayersDirective = /** @class */ (function () {\r\n    function LeafletLayersDirective(leafletDirective, differs, zone) {\r\n        this.differs = differs;\r\n        this.zone = zone;\r\n        this.leafletDirective = new LeafletDirectiveWrapper(leafletDirective);\r\n        this.layersDiffer = this.differs.find([]).create();\r\n    }\r\n    Object.defineProperty(LeafletLayersDirective.prototype, \"layers\", {\r\n        get: function () {\r\n            return this.layersValue;\r\n        },\r\n        set: \r\n        // Set/get the layers\r\n        function (v) {\r\n            this.layersValue = v;\r\n            // Now that we have a differ, do an immediate layer update\r\n            this.updateLayers();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    LeafletLayersDirective.prototype.ngDoCheck = function () {\r\n        this.updateLayers();\r\n    };\r\n    LeafletLayersDirective.prototype.ngOnInit = function () {\r\n        // Init the map\r\n        this.leafletDirective.init();\r\n        // Update layers once the map is ready\r\n        this.updateLayers();\r\n    };\r\n    LeafletLayersDirective.prototype.ngOnDestroy = function () {\r\n        this.layers = [];\r\n    };\r\n    /**\r\n     * Update the state of the layers.\r\n     * We use an iterable differ to synchronize the map layers with the state of the bound layers array.\r\n     * This is important because it allows us to react to changes to the contents of the array as well\r\n     * as changes to the actual array instance.\r\n     */\r\n    /**\r\n         * Update the state of the layers.\r\n         * We use an iterable differ to synchronize the map layers with the state of the bound layers array.\r\n         * This is important because it allows us to react to changes to the contents of the array as well\r\n         * as changes to the actual array instance.\r\n         */\r\n    LeafletLayersDirective.prototype.updateLayers = /**\r\n         * Update the state of the layers.\r\n         * We use an iterable differ to synchronize the map layers with the state of the bound layers array.\r\n         * This is important because it allows us to react to changes to the contents of the array as well\r\n         * as changes to the actual array instance.\r\n         */\r\n    function () {\r\n        var map = this.leafletDirective.getMap();\r\n        if (null != map && null != this.layersDiffer) {\r\n            var changes_1 = this.layersDiffer.diff(this.layersValue);\r\n            if (null != changes_1) {\r\n                // Run outside angular to ensure layer events don't trigger change detection\r\n                this.zone.runOutsideAngular(function () {\r\n                    changes_1.forEachRemovedItem(function (c) {\r\n                        map.removeLayer(c.item);\r\n                    });\r\n                    changes_1.forEachAddedItem(function (c) {\r\n                        map.addLayer(c.item);\r\n                    });\r\n                });\r\n            }\r\n        }\r\n    };\r\n    LeafletLayersDirective.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: '[leafletLayers]'\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    LeafletLayersDirective.ctorParameters = function () { return [\r\n        { type: LeafletDirective, },\r\n        { type: IterableDiffers, },\r\n        { type: NgZone, },\r\n    ]; };\r\n    LeafletLayersDirective.propDecorators = {\r\n        \"layers\": [{ type: Input, args: ['leafletLayers',] },],\r\n    };\r\n    return LeafletLayersDirective;\r\n}());\r\nexport { LeafletLayersDirective };\r\n//# sourceMappingURL=leaflet-layers.directive.js.map","var LeafletControlLayersChanges = /** @class */ (function () {\r\n    function LeafletControlLayersChanges() {\r\n        this.layersRemoved = 0;\r\n        this.layersChanged = 0;\r\n        this.layersAdded = 0;\r\n    }\r\n    LeafletControlLayersChanges.prototype.changed = function () {\r\n        return !(this.layersRemoved === 0 && this.layersChanged === 0 && this.layersAdded === 0);\r\n    };\r\n    return LeafletControlLayersChanges;\r\n}());\r\nexport { LeafletControlLayersChanges };\r\n//# sourceMappingURL=leaflet-control-layers-changes.model.js.map","import { control } from 'leaflet';\r\nimport { LeafletControlLayersChanges } from './leaflet-control-layers-changes.model';\r\nvar LeafletControlLayersWrapper = /** @class */ (function () {\r\n    function LeafletControlLayersWrapper(zone) {\r\n        // Nothing here\r\n        this.zone = zone;\r\n    }\r\n    LeafletControlLayersWrapper.prototype.getLayersControl = function () {\r\n        return this.layersControl;\r\n    };\r\n    LeafletControlLayersWrapper.prototype.init = function (controlConfig, controlOptions) {\r\n        var _this = this;\r\n        var baseLayers = controlConfig.baseLayers || {};\r\n        var overlays = controlConfig.overlays || {};\r\n        // Create the control outside of angular to ensure events don't trigger change detection\r\n        this.zone.runOutsideAngular(function () {\r\n            _this.layersControl = control.layers(baseLayers, overlays, controlOptions);\r\n        });\r\n        return this.layersControl;\r\n    };\r\n    LeafletControlLayersWrapper.prototype.applyBaseLayerChanges = function (changes) {\r\n        var results = new LeafletControlLayersChanges();\r\n        if (null != this.layersControl) {\r\n            results = this.applyChanges(changes, this.layersControl.addBaseLayer);\r\n        }\r\n        return results;\r\n    };\r\n    LeafletControlLayersWrapper.prototype.applyOverlayChanges = function (changes) {\r\n        var results = new LeafletControlLayersChanges();\r\n        if (null != this.layersControl) {\r\n            results = this.applyChanges(changes, this.layersControl.addOverlay);\r\n        }\r\n        return results;\r\n    };\r\n    LeafletControlLayersWrapper.prototype.applyChanges = function (changes, addFn) {\r\n        var _this = this;\r\n        var results = new LeafletControlLayersChanges();\r\n        if (null != changes) {\r\n            // All layer management is outside angular to avoid layer events from triggering change detection\r\n            this.zone.runOutsideAngular(function () {\r\n                changes.forEachChangedItem(function (c) {\r\n                    _this.layersControl.removeLayer(c.previousValue);\r\n                    addFn.call(_this.layersControl, c.currentValue, c.key);\r\n                    results.layersChanged++;\r\n                });\r\n                changes.forEachRemovedItem(function (c) {\r\n                    _this.layersControl.removeLayer(c.previousValue);\r\n                    results.layersRemoved++;\r\n                });\r\n                changes.forEachAddedItem(function (c) {\r\n                    addFn.call(_this.layersControl, c.currentValue, c.key);\r\n                    results.layersAdded++;\r\n                });\r\n            });\r\n        }\r\n        return results;\r\n    };\r\n    return LeafletControlLayersWrapper;\r\n}());\r\nexport { LeafletControlLayersWrapper };\r\n//# sourceMappingURL=leaflet-control-layers.wrapper.js.map","var LeafletControlLayersConfig = /** @class */ (function () {\r\n    function LeafletControlLayersConfig() {\r\n        this.baseLayers = {};\r\n        this.overlays = {};\r\n    }\r\n    return LeafletControlLayersConfig;\r\n}());\r\nexport { LeafletControlLayersConfig };\r\n//# sourceMappingURL=leaflet-control-layers-config.model.js.map","import { Directive, Input, KeyValueDiffers, NgZone } from '@angular/core';\r\nimport { LeafletDirective } from '../../core/leaflet.directive';\r\nimport { LeafletDirectiveWrapper } from '../../core/leaflet.directive.wrapper';\r\nimport { LeafletControlLayersWrapper } from './leaflet-control-layers.wrapper';\r\nimport { LeafletControlLayersConfig } from './leaflet-control-layers-config.model';\r\n/**\r\n * Layers Control\r\n *\r\n * This directive is used to configure the layers control. The input accepts an object with two\r\n * key-value maps of layer name -> layer. Mutable changes are detected. On changes, a differ is\r\n * used to determine what changed so that layers are appropriately added or removed.\r\n *\r\n * To specify which layer to show as the 'active' baselayer, you will want to add it to the map\r\n * using the layers directive. Otherwise, the last one it sees will be used.\r\n */\r\nvar LeafletLayersControlDirective = /** @class */ (function () {\r\n    function LeafletLayersControlDirective(leafletDirective, differs, zone) {\r\n        this.differs = differs;\r\n        this.zone = zone;\r\n        this.leafletDirective = new LeafletDirectiveWrapper(leafletDirective);\r\n        this.controlLayers = new LeafletControlLayersWrapper(this.zone);\r\n        // Generate differs\r\n        this.baseLayersDiffer = this.differs.find({}).create();\r\n        this.overlaysDiffer = this.differs.find({}).create();\r\n    }\r\n    Object.defineProperty(LeafletLayersControlDirective.prototype, \"layersControlConfig\", {\r\n        get: function () {\r\n            return this.layersControlConfigValue;\r\n        },\r\n        set: function (v) {\r\n            // Validation/init stuff\r\n            if (null == v) {\r\n                v = new LeafletControlLayersConfig();\r\n            }\r\n            if (null == v.baseLayers) {\r\n                v.baseLayers = {};\r\n            }\r\n            if (null == v.overlays) {\r\n                v.overlays = {};\r\n            }\r\n            // Store the value\r\n            this.layersControlConfigValue = v;\r\n            // Update the map\r\n            this.updateLayers();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    LeafletLayersControlDirective.prototype.ngOnInit = function () {\r\n        var _this = this;\r\n        // Init the map\r\n        this.leafletDirective.init();\r\n        // Set up control outside of angular to avoid change detection when using the control\r\n        this.zone.runOutsideAngular(function () {\r\n            // Set up all the initial settings\r\n            // Set up all the initial settings\r\n            _this.controlLayers\r\n                .init({}, _this.layersControlOptions)\r\n                .addTo(_this.leafletDirective.getMap());\r\n        });\r\n        this.updateLayers();\r\n    };\r\n    LeafletLayersControlDirective.prototype.ngOnDestroy = function () {\r\n        this.layersControlConfig = { baseLayers: {}, overlays: {} };\r\n        this.controlLayers.getLayersControl().remove();\r\n    };\r\n    LeafletLayersControlDirective.prototype.ngDoCheck = function () {\r\n        this.updateLayers();\r\n    };\r\n    LeafletLayersControlDirective.prototype.updateLayers = function () {\r\n        var map = this.leafletDirective.getMap();\r\n        var layersControl = this.controlLayers.getLayersControl();\r\n        if (null != map && null != layersControl) {\r\n            // Run the baselayers differ\r\n            if (null != this.baseLayersDiffer && null != this.layersControlConfigValue.baseLayers) {\r\n                var changes = this.baseLayersDiffer.diff(this.layersControlConfigValue.baseLayers);\r\n                this.controlLayers.applyBaseLayerChanges(changes);\r\n            }\r\n            // Run the overlays differ\r\n            if (null != this.overlaysDiffer && null != this.layersControlConfigValue.overlays) {\r\n                var changes = this.overlaysDiffer.diff(this.layersControlConfigValue.overlays);\r\n                this.controlLayers.applyOverlayChanges(changes);\r\n            }\r\n        }\r\n    };\r\n    LeafletLayersControlDirective.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: '[leafletLayersControl]'\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    LeafletLayersControlDirective.ctorParameters = function () { return [\r\n        { type: LeafletDirective, },\r\n        { type: KeyValueDiffers, },\r\n        { type: NgZone, },\r\n    ]; };\r\n    LeafletLayersControlDirective.propDecorators = {\r\n        \"layersControlConfig\": [{ type: Input, args: ['leafletLayersControl',] },],\r\n        \"layersControlOptions\": [{ type: Input, args: ['leafletLayersControlOptions',] },],\r\n    };\r\n    return LeafletLayersControlDirective;\r\n}());\r\nexport { LeafletLayersControlDirective };\r\n//# sourceMappingURL=leaflet-control-layers.directive.js.map","var LeafletUtil = /** @class */ (function () {\r\n    function LeafletUtil() {\r\n    }\r\n    LeafletUtil.mapToArray = function (map) {\r\n        var toReturn = [];\r\n        for (var k in map) {\r\n            if (map.hasOwnProperty(k)) {\r\n                toReturn.push(map[k]);\r\n            }\r\n        }\r\n        return toReturn;\r\n    };\r\n    return LeafletUtil;\r\n}());\r\nexport { LeafletUtil };\r\n//# sourceMappingURL=leaflet.util.js.map","import { Directive, Input, KeyValueDiffers, NgZone } from '@angular/core';\r\nimport { Control } from 'leaflet';\r\nimport { LeafletUtil } from '../../core/leaflet.util';\r\nimport { LeafletDirective } from '../../core/leaflet.directive';\r\nimport { LeafletDirectiveWrapper } from '../../core/leaflet.directive.wrapper';\r\nimport { LeafletControlLayersWrapper } from '../control/leaflet-control-layers.wrapper';\r\n/**\r\n * Baselayers directive\r\n *\r\n * This directive is provided as a convenient way to add baselayers to the map. The input accepts\r\n * a key-value map of layer name -> layer. Mutable changed are detected. On changes, a differ is\r\n * used to determine what changed so that layers are appropriately added or removed. This directive\r\n * will also add the layers control so users can switch between available base layers.\r\n *\r\n * To specify which layer to show as the 'active' baselayer, you will want to add it to the map\r\n * using the layers directive. Otherwise, the plugin will use the last one it sees.\r\n */\r\nvar LeafletBaseLayersDirective = /** @class */ (function () {\r\n    function LeafletBaseLayersDirective(leafletDirective, differs, zone) {\r\n        this.differs = differs;\r\n        this.zone = zone;\r\n        this.leafletDirective = new LeafletDirectiveWrapper(leafletDirective);\r\n        this.controlLayers = new LeafletControlLayersWrapper(this.zone);\r\n        this.baseLayersDiffer = this.differs.find({}).create();\r\n    }\r\n    Object.defineProperty(LeafletBaseLayersDirective.prototype, \"baseLayers\", {\r\n        get: function () {\r\n            return this.baseLayersValue;\r\n        },\r\n        set: \r\n        // Set/get baseLayers\r\n        function (v) {\r\n            this.baseLayersValue = v;\r\n            this.updateBaseLayers();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    LeafletBaseLayersDirective.prototype.ngOnDestroy = function () {\r\n        this.baseLayers = {};\r\n        this.controlLayers.getLayersControl().remove();\r\n    };\r\n    LeafletBaseLayersDirective.prototype.ngOnInit = function () {\r\n        var _this = this;\r\n        // Init the map\r\n        this.leafletDirective.init();\r\n        // Create the control outside angular to prevent events from triggering chnage detection\r\n        this.zone.runOutsideAngular(function () {\r\n            // Initially configure the controlLayers\r\n            // Initially configure the controlLayers\r\n            _this.controlLayers\r\n                .init({}, _this.layersControlOptions)\r\n                .addTo(_this.leafletDirective.getMap());\r\n        });\r\n        this.updateBaseLayers();\r\n    };\r\n    LeafletBaseLayersDirective.prototype.ngDoCheck = function () {\r\n        this.updateBaseLayers();\r\n    };\r\n    LeafletBaseLayersDirective.prototype.updateBaseLayers = function () {\r\n        var map = this.leafletDirective.getMap();\r\n        var layersControl = this.controlLayers.getLayersControl();\r\n        if (null != map && null != layersControl && null != this.baseLayersDiffer) {\r\n            var changes = this.baseLayersDiffer.diff(this.baseLayersValue);\r\n            var results = this.controlLayers.applyBaseLayerChanges(changes);\r\n            if (results.changed()) {\r\n                this.syncBaseLayer();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Check the current base layer and change it to the new one if necessary\r\n     */\r\n    /**\r\n         * Check the current base layer and change it to the new one if necessary\r\n         */\r\n    LeafletBaseLayersDirective.prototype.syncBaseLayer = /**\r\n         * Check the current base layer and change it to the new one if necessary\r\n         */\r\n    function () {\r\n        var _this = this;\r\n        var map = this.leafletDirective.getMap();\r\n        var layers = LeafletUtil.mapToArray(this.baseLayers);\r\n        var foundLayer;\r\n        // Search all the layers in the map to see if we can find them in the baselayer array\r\n        map.eachLayer(function (l) {\r\n            foundLayer = layers.find(function (bl) { return (l === bl); });\r\n        });\r\n        // Did we find the layer?\r\n        if (null != foundLayer) {\r\n            // Yes - set the baselayer to the one we found\r\n            this.baseLayer = foundLayer;\r\n        }\r\n        else {\r\n            // No - set the baselayer to the first in the array and add it to the map\r\n            if (layers.length > 0) {\r\n                this.baseLayer = layers[0];\r\n                // Add layers outside of angular to prevent events from triggering change detection\r\n                this.zone.runOutsideAngular(function () {\r\n                    _this.baseLayer.addTo(map);\r\n                });\r\n            }\r\n        }\r\n    };\r\n    LeafletBaseLayersDirective.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: '[leafletBaseLayers]'\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    LeafletBaseLayersDirective.ctorParameters = function () { return [\r\n        { type: LeafletDirective, },\r\n        { type: KeyValueDiffers, },\r\n        { type: NgZone, },\r\n    ]; };\r\n    LeafletBaseLayersDirective.propDecorators = {\r\n        \"baseLayers\": [{ type: Input, args: ['leafletBaseLayers',] },],\r\n        \"layersControlOptions\": [{ type: Input, args: ['leafletLayersControlOptions',] },],\r\n    };\r\n    return LeafletBaseLayersDirective;\r\n}());\r\nexport { LeafletBaseLayersDirective };\r\n//# sourceMappingURL=leaflet-baselayers.directive.js.map","import { NgModule } from '@angular/core';\r\nimport { LeafletDirective } from './core/leaflet.directive';\r\nimport { LeafletLayerDirective } from './layers/leaflet-layer.directive';\r\nimport { LeafletLayersDirective } from './layers/leaflet-layers.directive';\r\nimport { LeafletLayersControlDirective } from './layers/control/leaflet-control-layers.directive';\r\nimport { LeafletBaseLayersDirective } from './layers/base/leaflet-baselayers.directive';\r\nvar LeafletModule = /** @class */ (function () {\r\n    function LeafletModule() {\r\n    }\r\n    LeafletModule.forRoot = function () {\r\n        return { ngModule: LeafletModule, providers: [] };\r\n    };\r\n    LeafletModule.decorators = [\r\n        { type: NgModule, args: [{\r\n                    exports: [\r\n                        LeafletDirective,\r\n                        LeafletLayerDirective,\r\n                        LeafletLayersDirective,\r\n                        LeafletLayersControlDirective,\r\n                        LeafletBaseLayersDirective\r\n                    ],\r\n                    declarations: [\r\n                        LeafletDirective,\r\n                        LeafletLayerDirective,\r\n                        LeafletLayersDirective,\r\n                        LeafletLayersControlDirective,\r\n                        LeafletBaseLayersDirective\r\n                    ]\r\n                },] },\r\n    ];\r\n    return LeafletModule;\r\n}());\r\nexport { LeafletModule };\r\n//# sourceMappingURL=leaflet.module.js.map","import { tileLayer } from 'leaflet';\r\nvar LeafletTileLayerDefinition = /** @class */ (function () {\r\n    function LeafletTileLayerDefinition(type, url, options) {\r\n        this.type = type;\r\n        this.url = url;\r\n        this.options = options;\r\n    }\r\n    /**\r\n     * Creates a TileLayer from the provided definition. This is a convenience function\r\n     * to help with generating layers from objects.\r\n     *\r\n     * @param layerDef The layer to create\r\n     * @returns {TileLayer} The TileLayer that has been created\r\n     */\r\n    /**\r\n         * Creates a TileLayer from the provided definition. This is a convenience function\r\n         * to help with generating layers from objects.\r\n         *\r\n         * @param layerDef The layer to create\r\n         * @returns {TileLayer} The TileLayer that has been created\r\n         */\r\n    LeafletTileLayerDefinition.createTileLayer = /**\r\n         * Creates a TileLayer from the provided definition. This is a convenience function\r\n         * to help with generating layers from objects.\r\n         *\r\n         * @param layerDef The layer to create\r\n         * @returns {TileLayer} The TileLayer that has been created\r\n         */\r\n    function (layerDef) {\r\n        var layer;\r\n        switch (layerDef.type) {\r\n            case 'xyz':\r\n                layer = tileLayer(layerDef.url, layerDef.options);\r\n                break;\r\n            case 'wms':\r\n            default:\r\n                layer = tileLayer.wms(layerDef.url, layerDef.options);\r\n                break;\r\n        }\r\n        return layer;\r\n    };\r\n    /**\r\n     * Creates a TileLayer for each key in the incoming map. This is a convenience function\r\n     * for generating an associative array of layers from an associative array of objects\r\n     *\r\n     * @param layerDefs A map of key to tile layer definition\r\n     * @returns {{[p: string]: TileLayer}} A new map of key to TileLayer\r\n     */\r\n    /**\r\n         * Creates a TileLayer for each key in the incoming map. This is a convenience function\r\n         * for generating an associative array of layers from an associative array of objects\r\n         *\r\n         * @param layerDefs A map of key to tile layer definition\r\n         * @returns {{[p: string]: TileLayer}} A new map of key to TileLayer\r\n         */\r\n    LeafletTileLayerDefinition.createTileLayers = /**\r\n         * Creates a TileLayer for each key in the incoming map. This is a convenience function\r\n         * for generating an associative array of layers from an associative array of objects\r\n         *\r\n         * @param layerDefs A map of key to tile layer definition\r\n         * @returns {{[p: string]: TileLayer}} A new map of key to TileLayer\r\n         */\r\n    function (layerDefs) {\r\n        var layers = {};\r\n        for (var k in layerDefs) {\r\n            if (layerDefs.hasOwnProperty(k)) {\r\n                layers[k] = (LeafletTileLayerDefinition.createTileLayer(layerDefs[k]));\r\n            }\r\n        }\r\n        return layers;\r\n    };\r\n    /**\r\n     * Create a Tile Layer from the current state of this object\r\n     *\r\n     * @returns {TileLayer} A new TileLayer\r\n     */\r\n    /**\r\n         * Create a Tile Layer from the current state of this object\r\n         *\r\n         * @returns {TileLayer} A new TileLayer\r\n         */\r\n    LeafletTileLayerDefinition.prototype.createTileLayer = /**\r\n         * Create a Tile Layer from the current state of this object\r\n         *\r\n         * @returns {TileLayer} A new TileLayer\r\n         */\r\n    function () {\r\n        return LeafletTileLayerDefinition.createTileLayer(this);\r\n    };\r\n    return LeafletTileLayerDefinition;\r\n}());\r\nexport { LeafletTileLayerDefinition };\r\n//# sourceMappingURL=leaflet-tile-layer-definition.model.js.map"],"names":["latLng","EventEmitter","map","Directive","ElementRef","NgZone","Input","Output","HostListener","IterableDiffers","control","KeyValueDiffers","NgModule","tileLayer"],"mappings":"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"}